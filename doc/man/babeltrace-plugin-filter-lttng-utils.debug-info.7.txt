babeltrace-plugin-filter-lttng-utils.debug-info(7)
==================================================
:manpagetype: component class
:revdate: 28 February 2017
:comp: `lttng-utils.debug-info`
:defdebuginfoname: `debug_info`


NAME
----
babeltrace-plugin-filter-lttng-utils.debug-info - Babeltrace's debugging
information utility filter component class for LTTng traces


DESCRIPTION
-----------
The Babeltrace {comp} filter component class, member
of the man:babeltrace-plugin-lttng-utils(7) plugin, once instantiated,
receives http://lttng.org/[LTTng] events and creates new ones which are
copies of the original ones with extra debugging information when it's
available and possible.

----
        +-------------------------------+
... --->| lttng-utils.debug-info filter |---> ...
        +-------------------------------+
----

An {comp} filter component uses the LTTng state dump
events as well as the event context's `ip` (instruction pointer) field
to locate and read the corresponding debugging information. The
component can find the extra debugging information in an executable file
or in a directory containing debugging information created by the
compiler.

The new events contain the exact same fields as the original ones, and,
when possible, a new event context's structure field (besides the `ip`
field) named {defdebuginfoname} by default. This structure contains
the following fields:

`bin` (string field)::
    Executable path or name followed by `@ADDR` or `+ADDR`, where
    `ADDR` is the address where it was loaded while being traced.
    `@ADDR` means `ADDR` is an absolute address, and `+ADDR` means
    `ADDR` is a relative address.
+
Example: `my-program@0x401040`.

`func` (string field)::
    Function name followed by `+OFFSET`, where `OFFSET` is the
    offset from the beginning of the function symbol in the executable
    file.
+
Example: `load_user_config+0x194`.

`src` (string field)::
    Source file path or name followed by `:LINE`, where `LINE` is the
    line number in this source file at which the event occured.
+
Example: `user-config.c:1025`.

Any of those the previous fields can be an empty string if the
debugging information was not available for the analyzed original
LTTng event.

When the filter component creates a new event with debugging
information, the original event is discarded. If the component receives
a non-LTTng event, the event is moved to the component's output connection
without alteration.


Compile an executable for debugging information analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
With GCC, you should compile the program or library source files in
debug mode with the nlopt:-g option. This option makes the compiler
generate debugging information in the operating system's native format.
This format is recognized by the {comp} filter
component: it can translate the instruction pointer field of an event's
context to a source file and line number, along with the name of the
surrounding function.

NOTE: Only the debugging information in DWARF format, version 2 or
later, is currently supported by the {comp} filter
component class. Use the nlopt:-gdwarf or nlopt:-gdwarf-VERSION GCC
options to explicitly generate DWARF debugging information.

If you don't compile the executable's source files with the nlopt:-g
option or with an equivalent option, no DWARF information is available:
the filter component uses ELF symbols from the executable file instead.
In this case, the events that the component creates do not contain the
source file and line number (`src` field), but only the name of the
nearest function symbol with an offset in bytes to the location in the
executable from which the LTTng event occured (`func` field).

If the executable file has neither ELF symbols nor DWARF information,
the {comp} filter component cannot map the event to
its source location: it emits the original LTTng event which has no
special {defdebuginfoname} context field.


LTTng prerequisites
~~~~~~~~~~~~~~~~~~~
A {comp} filter component can only analyze user space
events generated by LTTng{nbsp}2.8.0 or later.

http://lttng.org/download/[Get LTTng].

The filter component needs the LTTng-UST events to contain the
`ip` and `vpid` fields in their context.

To add those context fields with the man:lttng(1) command-line tool
before the tracers are active (before `lttng start`):

[role="term"]
----
lttng add-context --userspace --type=ip --type=vpid
----

See man:lttng-add-context(1) for more information.

To get debugging information for LTTng-UST events which occur in
dynamically loaded objects, for example plugins, start the application
to trace with the LTTng-UST dynamic linking helper:

[role="term"]
----
LD_PRELOAD=liblttng-ust-dl.so my-app
----

See man:lttng-ust-dl(3) for more information.


Separate debugging information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
It is possible to store DWARF debugging information outside the
executable itself, whether it is to reduce the executable's file size,
or simply to facilitate the sharing of the debugging information.

This is usually achieved via one of two mechanisms, namely _build ID_
and _debug link_. Their use and operation is described in the
https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html[Debugging
Information in Separate Files] section of GDB's documentation.

A {comp} filter component can find separate debugging
information files automatically, as long as they meet the requirements
stated in this man page.

The debugging information lookup order is the same as GDB's, that is:

. Within the executable file itself.

. Through the build ID method in the standard
  `/usr/lib/debug/.build-id` directory.

. In the various possible debug link locations.

The first debugging information file found is used.

You can use the param:dir initialization parameter to override the
default `/usr/lib/debug` directory used in the build ID and debug link
methods.

NOTE: It is currently not possible to make this component search for
debugging information in multiple directories.


Target prefix
~~~~~~~~~~~~~
The debugging information analysis that a {comp} filter
component performs uses the paths to the executables as collected
during tracing as the default mechanism to resolve DWARF and ELF
information.

If the trace was taken on a separate machine, however, you can use the
param:target-prefix parameter to specify a prefix directory, that is,
the root of the target file system.

For example, if an instrumented executable's path is `/usr/bin/foo` on
the target system, it can be placed at `/home/user/target/usr/bin/foo`
on the system on which you use the filter component. In this case, the
target prefix to use is `/home/efficios/target`.


INITIALIZATION PARAMETERS
-------------------------
The following parameters are optional unless indicated otherwise.

param:debug-info-field-name='NAME'::
    Name the debugging information structure field in the context of
    the created events 'NAME' instead of the default {defdebuginfoname}.

param:dir='DIR' (string)::
    Use 'DIR' as the directory from which to load debugging information
    with the build ID and debug link methods instead of
    `/usr/lib/debug`.

param:full-path=`yes` (boolean)::
    Use the full path when writing the executable name (`bin`) and
    source file name (`src`) fields in the {defdebuginfoname} context
    field of the created events.

param:target-prefix='DIR' (string)::
    Use 'DIR' as the root directory of the target file system instead of
    `/`.


PORTS
-----
A {comp} filter component only has a default input
port and a default output port.


QUERY OBJECTS
-------------
This component class has no objects to query.


include::common-footer.txt[]


AUTHORS
-------
Antoine Busque, Julien Desfossez, Philippe Proulx.


SEE ALSO
--------
man:babeltrace(1),
man:babeltrace-convert(1),
man:lttng-add-context(1),
man:lttng-ust-dl(3),
man:babeltrace-plugin-utils(7)
